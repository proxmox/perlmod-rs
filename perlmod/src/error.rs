//! Error types.

use std::cell::Cell;
use std::fmt;
use std::os::raw::c_int;

/// Error returned by `TryFrom` implementations between `Scalar`, `Array` and `Hash`.
#[derive(Debug)]
pub struct CastError;

impl std::error::Error for CastError {}

impl fmt::Display for CastError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("wrong type")
    }
}

/// Generic errors from the perlmod crate.
#[derive(Clone, Debug)]
pub struct Error(pub(crate) String);

impl std::error::Error for Error {}

impl fmt::Display for Error {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "error: {}", self.0)
    }
}

impl Error {
    #[inline]
    pub fn new(s: &str) -> Self {
        Self(s.to_string())
    }

    #[inline]
    pub fn new_owned(s: String) -> Self {
        Self(s)
    }

    #[inline]
    pub fn fail<T>(s: &str) -> Result<T, Self> {
        Err(Self(s.to_string()))
    }
}

impl serde::de::Error for Error {
    fn custom<T: std::fmt::Display>(msg: T) -> Self {
        Self(msg.to_string())
    }
}

impl serde::ser::Error for Error {
    fn custom<T: std::fmt::Display>(msg: T) -> Self {
        Self(msg.to_string())
    }
}

/// Error used in the `TryFrom` implementation generated by the
/// [`declare_magic!`](crate::declare_magic!) macro.
#[derive(Debug)]
pub enum MagicError {
    /// The value we tried to dereference was not a perl reference type.
    NotAReference(&'static str),

    /// The expected magic type was not found.
    NotFound(&'static str),
}

impl fmt::Display for MagicError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            MagicError::NotAReference(class) => {
                write!(f, "value blessed into {class} was not a reference")
            }
            MagicError::NotFound("") => {
                write!(f, "value did not contain the requested magic pointer")
            }
            MagicError::NotFound(class) => write!(
                f,
                "value blessed into {class} did not contain its declared magic pointer"
            ),
        }
    }
}

impl std::error::Error for MagicError {}

thread_local! {
    static ERRNO: Cell<c_int> = const { Cell::new(0) };
}

/// Set the perlmod-specific `errno` value. This is *not* libc's `errno`, but a separate storage
/// location not touched by other C or perl functions. An `#[export(errno)]` function will copy
/// this value to libc's errno location at right before returning into the perl stack (*after* all
/// side effects such as destructors have already finished).
pub fn set_errno(value: c_int) {
    ERRNO.with(|v| v.set(value))
}

/// *Not* `libc`'s `errno`, this retrieves a value previously set with [`set_errno`], see its
/// description for details.
pub fn get_errno() -> c_int {
    ERRNO.with(|v| v.get())
}

/// This is part of the proc-macro API and is of little use to users of this crate directly.
/// When manually implementing "xsubs" this can be used before returning as a shortcut to copying
/// the perlmod errno value to libc.
///
/// # Safety
///
/// This is generally safe, but care should be taken as this manipulates `errno` and any C call
/// might mess it up again.
pub unsafe fn copy_errno_to_libc() {
    unsafe {
        libc::__errno_location().write(get_errno());
    }
}
